import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.1.1.RELEASE'
	id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'

repositories {
	mavenCentral()
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

group = 'de.adesso'
version = '1.0.0-SNAPSHOT'

targetCompatibility = '11'
sourceCompatibility = '11'

jacoco {
	toolVersion = "${jacocoToolVersion}"
}

jacocoTestReport {
	reports {
		html.destination file("${buildDir}/jacocoHtml")
	}
}

dependencies {
	implementation platform("org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}",)

	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-mail')
	implementation('org.springframework.ldap:spring-ldap-core')

	implementation('org.keycloak:keycloak-spring-boot-starter')
	implementation("mysql:mysql-connector-java:${mysqlConnectorJVersion}")
	implementation("org.hibernate:hibernate-search-orm:${hibernateSearchVersion}")

	implementation("org.apache.velocity:velocity-engine-core:${velocityEngineCoreVersion}")
	implementation("org.apache.velocity.tools:velocity-tools-generic:${velocityToolsGenericVersion}")
	implementation("org.apache.commons:commons-text:${apacheCommonsTextVersion}")

	implementation("org.flywaydb:flyway-core:${flywayCoreVersion}")

	compileOnly('org.projectlombok:lombok')

	runtime('org.hsqldb:hsqldb')

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('org.springframework.ldap:spring-ldap-test')

	annotationProcessor('org.projectlombok:lombok')
	annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')

	developmentOnly("org.springframework.boot:spring-boot-devtools")
}

task('dockerCopy', type: DefaultTask, dependsOn: bootJar) {
	doFirst {
		delete 'docker/temp'
	}

	doLast {
		copy {
			from('docker') {
				include '*.properties'

				filter { String line ->
					def tokensInLine = line.findAll('@\\w+@')
					def replacedLine = line

					tokensInLine.each {
						def tokenWithoutDelimiters = it.replace('@', '')
						def envVariable = System.getenv(tokenWithoutDelimiters)
						def tokenReplacement = (envVariable != null) ? envVariable : System.getProperty(tokenWithoutDelimiters)

						if (!tokenReplacement) {
							throw new IllegalStateException("Could not replace token ${it} in property file! " +
									"No system property or environment variable ${tokenWithoutDelimiters} set!")
						}

						replacedLine = replacedLine.replace("${it}", tokenReplacement)
					}

					return replacedLine
				}
			}

			from('docker') {
				include 'Dockerfile'

				filter(ReplaceTokens, tokens: [
						JAR_NAME: jar.archiveName
				])
			}

			from "${buildDir}/libs/${jar.archiveName}"

			into 'docker/temp'
		}
	}
}

clean.doFirst {
	delete 'docker/temp'
}
